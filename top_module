`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/23/2024 03:07:23 PM
// Design Name: 
// Module Name: top_level
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module top_level(Clk);

    input Clk;
    
    //module stage_IF(PCSrc_IF, AddALU_out_IF, Instruction_IF, PCAdder_out_IF);
    stage_IF f1(PCSrc_MEM, ALUAddResult_out_EXMEM, Instruction_IF, PCAdder_out_IF); 
    
    
    //module IF_ID(PCAdder_in_IFID, Instruction_in_IFID, PCAdder_out_IFID, Instruction_out_IFID);
    IF_ID f2(PCAdder_out_IF, Instruction_IF, PCAdder_out_IFID, Instruction_out_IFID);
    
    
    
    //module stage_ID (PCAddResult_in_ID, Instruction_ID, WriteRegister_ID, WriteData_ID, RegWrite_in_ID, RegWrite_out_ID, MemtoReg_ID, Branch_ID, MemRead_ID, 
    //                 MemWrite_ID, RegDst_ID, ALUOp_ID, ALUSrc_ID, PCSrc_ID, PCAddResult_out_ID, ReadData1_ID, ReadData2_ID, SignExtResult_ID, rt_ID, rd_ID);
    stage_ID f3(PCAdder_out_IFID, Instruction_out_IFID, mux2_result_WB, mux3_result_WB, RegWrite_out_MEMWB,
    
                RegWrite_out_ID, MemtoReg_ID, Branch_ID, MemRead_ID, MemWrite_ID, RegDst_ID, ALUOp_ID, ALUSrc_ID, PCSrc_ID, 
                PCAddResult_out_ID, ReadData1_ID, ReadData2_ID, SignExtResult_ID, rt_ID, rd_ID);
    
    
    
    //module ID_EX(PCAddResult_in_IDEX, ReadData1_in_IDEX, ReadData2_in_IDEX, signExtend_in_IDEX, rt_in_IDEX, rd_in_IDEX, RegWrite_in_IDEX, MemtoReg_in_IDEX, 
    //               Branch_in_IDEX, MemRead_in_IDEX, MemWrite_in_IDEX, RegDst_in_IDEX, ALUOp_in_IDEX, ALUSrc_in_IDEX, Store_size_in_IDEX, Load_size_in_IDEX, 
    //               PCAddResult_out_IDEX, ReadData1_out_IDEX, ReadData2_out_IDEX, signExtend_out_IDEX, rt_out_IDEX, rd_out_IDEX, RegWrite_out_IDEX, 
    //               MemtoReg_out_IDEX, Branch_out_IDEX, MemRead_out_IDEX, MemWrite_out_IDEX, RegDst_out_IDEX, ALUOp_out_IDEX, ALUSrc_out_IDEX, Store_size_out_IDEX, 
    //               Load_size_out_IDEX); 
    ID_EX f4(PCAddResult_out_ID, ReadData1_ID, ReadData2_ID, SignExtResult_ID, rt_ID, rd_ID, RegWrite_out_ID, MemtoReg_ID,
             Branch_ID, MemRead_ID, MemWrite_ID, RegDst_ID, ALUOp_ID, ALUSrc_ID,
             
             
             PCAddResult_out_IDEX, ReadData1_out_IDEX, ReadData2_out_IDEX, signExtend_out_IDEX, rt_out_IDEX, rd_out_IDEX, RegWrite_out_IDEX, 
             MemtoReg_out_IDEX, Branch_out_IDEX, MemRead_out_IDEX, MemWrite_out_IDEX, RegDst_out_IDEX, ALUOp_out_IDEX, ALUSrc_out_IDEX, Store_size_out_IDEX, 
             Load_size_out_IDEX);
    
    
    
    //module stage_EX (RegWrite_in_EX, MemtoReg_in_EX, Branch_in_EX, MemRead_in_EX, MemWrite_in_EX, RegDst_EX, ALUOp_EX, ALUSrc_EX, 
    //                   PCAddResult_EX, ReadData1_EX, ReadData2_in_EX, SignExtResult_EX, rt_EX, rd_EX, Store_size_in_EX, 
    //                   Load_size_in_EX, Store_size_out_EX, Load_size_out_EX, RegWrite_out_EX, 
    //                   MemtoReg_out_EX, Branch_out_EX, MemRead_out_EX, MemWrite_out_EX, ALUAddResult_EX, Zero_EX, ALUResult_EX, ReadData2_out_EX, mux2_result_EX);
    stage_EX f5(RegWrite_out_IDEX, MemtoReg_out_IDEX, Branch_out_IDEX, MemRead_out_IDEX, MemWrite_out_IDEX, RegDst_out_IDEX, ALUOp_out_IDEX, ALUSrc_out_IDEX,
                PCAddResult_out_IDEX, ReadData1_out_IDEX, ReadData2_out_IDEX, signExtend_out_IDEX, rt_out_IDEX, rd_out_IDEX, Store_size_out_IDEX,
                Load_size_out_IDEX, Store_size_out_EX, Load_size_out_EX, RegWrite_out_EX, 
                MemtoReg_out_EX, Branch_out_EX, MemRead_out_EX, MemWrite_out_EX, ALUAddResult_EX, Zero_EX, ALUResult_EX, ReadData2_out_EX, mux2_result_EX);
                
                



    //module EX_MEM(MemWrite_in_EXMEM, MemRead_in_EXMEM, Branch_in_EXMEM, MemtoReg_in_EXMEM, RegWrite_in_EXMEM, ALUAddResult_in_EXMEM, Zero_in_EXMEM, 
    //                ALUResult_in_EXMEM, ReadData2_in_EXMEM, mux2_Result_in_EXMEM, Store_size_in_EXMEM, Load_size_in_EXMEM, MemWrite_out_EXMEM, MemRead_out_EXMEM, 
    //                Branch_out_EXMEM, MemtoReg_out_EXMEM, RegWrite_out_EXMEM, ALUAddResult_out_EXMEM, Zero_out_EXMEM, ALUResult_out_EXMEM, ReadData2_out_EXMEM, 
    //                mux2_Result_out_EXMEM, Store_size_out_EXMEM, Load_size_out_EXMEM);
    EX_MEM f6(
    
    
    
    //module stage_MEM (MemWrite_MEM, MemRead_MEM, Branch_MEM, MemtoReg_in_MEM, RegWrite_in_MEM, Zero_MEM, ALUResult_in_MEM, ReadData2_MEM, mux2_result_in_MEM,
    //                    Store_size_MEM, Load_size_in_MEM, Load_size_out_MEM, MemtoReg_out_MEM, PCSrc_MEM, ALUResult_out_MEM, mux2_result_out_MEM, ReadData_MEM, 
    //                    RegWrite_out_MEM);
    
    
    
    //module MEM_WB(MemtoReg_in_MEMWB, RegWrite_in_MEMWB, ALUResult_in_MEMWB, ReadData2_in_MEMWB, mux2_result_in_MEMWB, MemtoReg_out_MEMWB, RegWrite_out_MEMWB, 
    //                ALUResult_out_MEMWB, ReadData2_out_MEMWB, mux2_result_out_MEMWB);
    
    
    
    //module stage_WB (ReadData_WB, ALUResult_WB, MemtoReg_WB, RegWrite_WB, mux3_result_WB, mux2_result_WB);
  
    
    
    
    
endmodule
